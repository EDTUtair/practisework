
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов
	СценарийСозданияТаблицыПереходов();
	
	ЗакрытьФормуБезусловно = Ложь;
	
	ОписаниеСобытиеДляЖурналаРегистрации = НСтр("ru = 'Помощник создания документов ""Перечисление НДФЛ в бюджет""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	ЗаполнитьЗначенияПоУмолчанию();
	
	Объект.СтавкаНДФЛ = Перечисления.НДФЛСтавки.Ставка13;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Окончание Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительнаяОперация = Ложь;
			ДлительнаяОперацияЗавершена = Истина;
			ПерейтиДалее();
			
		Иначе
			ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		КонецЕсли;
		
	Исключение
		ДлительнаяОперация = Ложь;
		ПерейтиНазад();
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выполнить операцию.'"));
		
		ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОписаниеСобытиеДляЖурналаРегистрации);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Поставляемая часть

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	СформироватьДокументыПеречисленияНДФЛ();
	
	ЗаполнитьТаблицуКВыплате();
	ПоказатьПредупреждение(, "Выполнено");
	
	//Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

// Переопределяемая часть

&НаКлиенте
Процедура СписокСуммКПеречислениюПриИзменении(Элемент)
	
	ОтметитьПодчиненныеЭлементы(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПодчиненныеЭлементы(ИдентификаторСтроки)
	
	СтрокаРодитель = ЭтаФорма.СписокСуммКПеречислению.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаРодитель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	МассивСтрок = СтрокаРодитель.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
	
		СтрокаТаблицы.Пометка = СтрокаРодитель.Пометка И СтрокаТаблицы.СуммаКПеречислению > 0;
	
	КонецЦикла; 
	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	//<ШАБЛОН: ЗДЕСЬ ОПИСЫВАЕТСЯ УСЛОВНОЕ ОФОРМЛЕНИЕ ФОРМЫ, ЕСЛИ ЭТО НЕОБХОДИМО>
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, МесяцНачисления");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияДляЗаполнения);
	
	Для каждого ЭлементЗаполнения Из ЗначенияДляЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Объект[ЭлементЗаполнения.Ключ]) Тогда
		     Продолжить;
		КонецЕсли; 
		
		Объект[ЭлементЗаполнения.Ключ] = ЭлементЗаполнения.Значение;
	
	КонецЦикла; 
	
	// Позиционируемся на первом шаге помощника
	Если Не ЗначениеЗаполнено(Объект.ПериодДанных.ДатаНачала) 
		ИЛИ Не ЗначениеЗаполнено(Объект.ПериодДанных.ДатаОкончания) Тогда
		
		Объект.ПериодДанных.ДатаНачала =  НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		Объект.ПериодДанных.ДатаОкончания = Объект.ПериодДанных.ДатаНачала;
		
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда 
		Объект.ДатаПлатежа = Объект.ПериодДанных.ДатаОкончания;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКВыплате()

	//Запрос.Текст = "	
	//	|ВЫБРАТЬ
	//	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Ведомость,
	//	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	//	|	КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	//	//|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК ДатаПолученияДохода,
	//	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	//	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаПриход-РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаРасход КАК СуммаНДФЛЗаПериод
	//	|ПОМЕСТИТЬ ВТРасчетыБюджетомПоНДФЛ
	//	|ИЗ
	//	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Обороты(&ДатаНачала, &ДатаКонца, Регистратор, Организация = &Организация) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	//	|ГДЕ
	//	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаПриход-РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаРасход > 0
	//	|	И (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	//	|			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	//	|			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
	//	|			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)" + 
	//	?(Объект.ОграничитьУказаннымПериодом, "И КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) МЕЖДУ &ДатаНачала И &ДатаКонца", " ") + "
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПеречислениеНДФЛВБюджет.Ведомость КАК Ведомость,
	//	|	ПеречислениеНДФЛВБюджет.Сотрудник КАК ФизическоеЛицо,
	//	|	ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода,
	//	|	ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	//	//|	ПеречислениеНДФЛВБюджет.ДатаПолученияДохода,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА ПеречислениеНДФЛВБюджет.Ссылка.Проведен
	//	|				ТОГДА ПеречислениеНДФЛВБюджет.Сумма
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК СуммаПеречисленногоНДФЛ,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА ПеречислениеНДФЛВБюджет.Ссылка.Проведен
	//	|				ТОГДА 0
	//	|			ИНАЧЕ ПеречислениеНДФЛВБюджет.Сумма
	//	|		КОНЕЦ) КАК СуммаПодготовленногоНДФЛ,
	//	|	СУММА(ПеречислениеНДФЛВБюджет.Сумма) КАК СуммаПеречисленийПоВедомости
	//	|ПОМЕСТИТЬ ВТПеречислениеНДФЛВБюджет
	//	|ИЗ
	//	|	Документ.ПеречислениеНДФЛВБюджет.ЮТР_ВедомостиНаВыплату КАК ПеречислениеНДФЛВБюджет
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетыБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	//	|		ПО (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо = ПеречислениеНДФЛВБюджет.Сотрудник)
	//	|			И (НЕ ПеречислениеНДФЛВБюджет.Ссылка.ПометкаУдаления)
	//	|			И ПеречислениеНДФЛВБюджет.Ведомость = РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ведомость
	//	|			И НАЧАЛОПЕРИОДА(ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ)
	//	|			И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ПеречислениеНДФЛВБюджет.Ведомость,
	//	|	ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода,
	//	|	ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане,
	//	|	ПеречислениеНДФЛВБюджет.Сотрудник
	//	//|,
	//	//|	ПеречислениеНДФЛВБюджет.ДатаПолученияДохода
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТРасчетыБюджетомПоНДФЛ.Ведомость КАК Ведомость,
	//	|	ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	//	|	ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	//	//|	ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК ДатаПолученияДохода,
	//	|	ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	//	|	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод КАК СуммаНДФЛЗаПериод,
	//	|	ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленногоНДФЛ, 0) КАК СуммаПеречисленногоНДФЛ,
	//	|	ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПодготовленногоНДФЛ, 0) КАК СуммаПодготовленногоНДФЛ,
	//	|	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод - ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости, 0) КАК СуммаКПеречислению
	//	|ИЗ
	//	|	ВТРасчетыБюджетомПоНДФЛ КАК ВТРасчетыБюджетомПоНДФЛ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречислениеНДФЛВБюджет КАК ПеречислениеНДФЛВБюджет
	//	|		ПО (ВТРасчетыБюджетомПоНДФЛ.Ведомость = ПеречислениеНДФЛВБюджет.Ведомость)
	//	|			И (ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо = ПеречислениеНДФЛВБюджет.ФизическоеЛицо)
	//	//|			И НАЧАЛОПЕРИОДА(ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) = ПеречислениеНДФЛВБюджет.ДатаПолученияДохода
	//	|			И ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод = ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости
	//	|			И ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = ПеречислениеНДФЛВБюджет.РегистрацияВНалоговомОргане
	//	|ГДЕ
	//	|	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод - ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости, 0) > 0
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	//	|	ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	//	|	ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо
	//	|ИТОГИ
	//	|	СУММА(СуммаНДФЛЗаПериод),
	//	|	СУММА(СуммаПеречисленногоНДФЛ),
	//	|	СУММА(СуммаПодготовленногоНДФЛ),
	//	|	СУММА(СуммаКПеречислению)
	//	|ПО
	//	|	РегистрацияВНалоговомОргане,
	//	|	МесяцНалоговогоПериода
	//	|АВТОУПОРЯДОЧИВАНИЕ";

	
	// ?(Объект.ОграничитьУказаннымПериодом, "И КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) МЕЖДУ &ДатаНачала И &ДатаКонца", " ") + "
	
	дзСписокСуммКПеречислению = РеквизитФормыВЗначение("СписокСуммКПеречислению");
	дзСписокСуммКПеречислению.Строки.Очистить();
	
	Для Каждого СтрСтавка ИЗ Метаданные.Перечисления.НДФЛСтавки.ЗначенияПеречисления  Цикл
		
		ТекСтавка = Перечисления.НДФЛСтавки[СтрСтавка.Имя];
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор КАК Ведомость,
		               |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		               |	КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		               |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаПриход - РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаРасход КАК СуммаНДФЛЗаПериод,
					   |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка КАК СтавкаНДФЛ
		               |ПОМЕСТИТЬ ВТРасчетыБюджетомПоНДФЛ
		               |ИЗ
		               |	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Обороты(&ДатаНачала, &ДатаКонца, Регистратор, Организация = &Организация) КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
		               |ГДЕ
		               |	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаПриход - РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СуммаРасход > 0
		               |	И (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
		               |			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
		               |			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением
		               |			ИЛИ РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком)
		               |	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка = &СтавкаНДФЛ " + 
		?(Объект.ОграничитьУказаннымПериодом, "И КОНЕЦПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) МЕЖДУ &ДатаНачала И &ДатаКонца", " ") + "
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПеречислениеНДФЛВБюджет.Ведомость КАК Ведомость,
		               |	ПеречислениеНДФЛВБюджет.Сотрудник КАК ФизическоеЛицо,
		               |	ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		               |	ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПеречислениеНДФЛВБюджет.Ссылка.Проведен
		               |				ТОГДА ПеречислениеНДФЛВБюджет.Сумма
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК СуммаПеречисленногоНДФЛ,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПеречислениеНДФЛВБюджет.Ссылка.Проведен
		               |				ТОГДА 0
		               |			ИНАЧЕ ПеречислениеНДФЛВБюджет.Сумма
		               |		КОНЕЦ) КАК СуммаПодготовленногоНДФЛ,
		               |	СУММА(ПеречислениеНДФЛВБюджет.Сумма) КАК СуммаПеречисленийПоВедомости
		               |ПОМЕСТИТЬ ВТПеречислениеНДФЛВБюджет
		               |ИЗ
		               |	Документ.ПеречислениеНДФЛВБюджет.ЮТР_ВедомостиНаВыплату КАК ПеречислениеНДФЛВБюджет
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчетыБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
		               |		ПО (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо = ПеречислениеНДФЛВБюджет.Сотрудник)
		               |			И (НЕ ПеречислениеНДФЛВБюджет.Ссылка.ПометкаУдаления)
		               |			И ПеречислениеНДФЛВБюджет.Ведомость = РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ведомость
		               |			И (НАЧАЛОПЕРИОДА(ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ))
		               |			И (РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане)
					   |ГДЕ
					   |	ПеречислениеНДФЛВБюджет.Ссылка.СПревышения = &СПревышения
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеречислениеНДФЛВБюджет.Ведомость,
		               |	ПеречислениеНДФЛВБюджет.Ссылка.МесяцНалоговогоПериода,
		               |	ПеречислениеНДФЛВБюджет.Ссылка.РегистрацияВНалоговомОргане,
		               |	ПеречислениеНДФЛВБюджет.Сотрудник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТРасчетыБюджетомПоНДФЛ.Ведомость КАК Ведомость,
		               |	ВТРасчетыБюджетомПоНДФЛ.СтавкаНДФЛ КАК СтавкаНДФЛ,
		               |	ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		               |	ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		               |	ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод КАК СуммаНДФЛЗаПериод,
		               |	ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленногоНДФЛ, 0) КАК СуммаПеречисленногоНДФЛ,
		               |	ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПодготовленногоНДФЛ, 0) КАК СуммаПодготовленногоНДФЛ,
		               |	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод - ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости, 0) КАК СуммаКПеречислению
		               |ИЗ
		               |	ВТРасчетыБюджетомПоНДФЛ КАК ВТРасчетыБюджетомПоНДФЛ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречислениеНДФЛВБюджет КАК ПеречислениеНДФЛВБюджет
		               |		ПО ВТРасчетыБюджетомПоНДФЛ.Ведомость = ПеречислениеНДФЛВБюджет.Ведомость
		               |			И ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо = ПеречислениеНДФЛВБюджет.ФизическоеЛицо
		               |			И ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод = ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости
		               |			И ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = ПеречислениеНДФЛВБюджет.РегистрацияВНалоговомОргане
		               |ГДЕ
		               |	ВТРасчетыБюджетомПоНДФЛ.СуммаНДФЛЗаПериод - ЕСТЬNULL(ПеречислениеНДФЛВБюджет.СуммаПеречисленийПоВедомости, 0) > 0
		               |
		               |УПОРЯДОЧИТЬ ПО   
		               |	ВТРасчетыБюджетомПоНДФЛ.СтавкаНДФЛ,
		               |	ВТРасчетыБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
		               |	ВТРасчетыБюджетомПоНДФЛ.МесяцНалоговогоПериода,
		               |	ВТРасчетыБюджетомПоНДФЛ.ФизическоеЛицо
		               |ИТОГИ
		               |	СУММА(СуммаНДФЛЗаПериод),
		               |	СУММА(СуммаПеречисленногоНДФЛ),
		               |	СУММА(СуммаПодготовленногоНДФЛ),
		               |	СУММА(СуммаКПеречислению)
		               |ПО
		               |	СтавкаНДФЛ,
		               |	РегистрацияВНалоговомОргане,
		               |	МесяцНалоговогоПериода
		               |АВТОУПОРЯДОЧИВАНИЕ";	
		
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ПериодДанных.ДатаНачала));
		Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.ПериодДанных.ДатаОкончания));
		
		Запрос.УстановитьПараметр("СтавкаНДФЛ", ТекСтавка);
		Запрос.УстановитьПараметр("СПревышения", ТекСтавка <> Перечисления.НДФЛСтавки.Ставка13);
		

		РезультатВыборки = Запрос.Выполнить();
		Если Не РезультатВыборки.Пустой() Тогда
			ВыборкаСтавкиНДФЛ = РезультатВыборки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтавкиНДФЛ.Следующий() Цикл
				СтрокаДЗГруппировки1 = дзСписокСуммКПеречислению.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДЗГруппировки1, ВыборкаСтавкиНДФЛ);
				СтрокаДЗГруппировки1.Пометка = ВыборкаСтавкиНДФЛ.СуммаКПеречислению > 0;

				ВыборкаРегистрацияВНалоговомОргане = ВыборкаСтавкиНДФЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаРегистрацияВНалоговомОргане.Следующий() Цикл
					ВыборкаМесяцНалоговогоПериода = ВыборкаРегистрацияВНалоговомОргане.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаМесяцНалоговогоПериода.Следующий() Цикл
						СтрокаДЗГруппировки = СтрокаДЗГруппировки1.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДЗГруппировки, ВыборкаМесяцНалоговогоПериода);
						СтрокаДЗГруппировки.Пометка = ВыборкаМесяцНалоговогоПериода.СуммаКПеречислению > 0;
						ВыборкаСтрок = ВыборкаМесяцНалоговогоПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаСтрок.Следующий() Цикл
							СтрокаДЗ = СтрокаДЗГруппировки.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДЗ, ВыборкаСтрок,,"РегистрацияВНалоговомОргане, МесяцНалоговогоПериода");
							СтрокаДЗ.Пометка = ВыборкаСтрок.СуммаКПеречислению > 0;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	ЗначениеВРеквизитФормы(дзСписокСуммКПеречислению, "СписокСуммКПеречислению");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПеречисленияНДФЛ()
	
	ЗначенияДляЗаполнения = Новый Структура("ГлавныйБухгалтер, Бухгалтер");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияДляЗаполнения);
	
	дзСписокСуммКПеречислению = РеквизитФормыВЗначение("СписокСуммКПеречислению");
	Для каждого СтрокаРодителя2 Из дзСписокСуммКПеречислению.Строки Цикл
		
		Если Не СтрокаРодителя2.Пометка Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Для Каждого СтрокаРодителя Из СтрокаРодителя2.Строки Цикл

			Если Не СтрокаРодителя.Пометка Тогда
		
				Продолжить;
			
			КонецЕсли; 
	
			
			ДокументПеречисления = Документы.ПеречислениеНДФЛВБюджет.СоздатьДокумент();
			СуммаКПеречислению = 0;
			Для каждого СтрокаТаблицы Из СтрокаРодителя.Строки Цикл
				Если НЕ СтрокаТаблицы.Пометка Тогда
					Продолжить
				КонецЕсли;
				Если Не СтрокаТаблицы.СуммаКПеречислению > 0 Тогда
				
					Продолжить;
				
				КонецЕсли; 
				
				СтрокаДокумента				= ДокументПеречисления.ЮТР_ВедомостиНаВыплату.Добавить();
				СтрокаДокумента.Сотрудник	= СтрокаТаблицы.ФизическоеЛицо;
				СтрокаДокумента.Сумма		= СтрокаТаблицы.СуммаКПеречислению;
				
				СуммаКПеречислению = СуммаКПеречислению + СтрокаТаблицы.СуммаКПеречислению;
				
				СтрокаДокумента.Ведомость = СтрокаТаблицы.Ведомость;
			
			КонецЦикла; 
			Если Не СуммаКПеречислению > 0  Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументПеречисления.Дата						= Объект.ДатаПлатежа; 
			ДокументПеречисления.УстановитьНовыйНомер();
			ДокументПеречисления.ДатаПлатежа				= Объект.ДатаПлатежа;
			ДокументПеречисления.МесяцНалоговогоПериода		= СтрокаРодителя.МесяцНалоговогоПериода;
			ДокументПеречисления.Организация				= Объект.Организация;
			ДокументПеречисления.Ответственный				= Объект.Ответственный;
			ДокументПеречисления.РегистрацияВНалоговомОргане = СтрокаРодителя.РегистрацияВНалоговомОргане;
			ДокументПеречисления.Сумма						 = СуммаКПеречислению;
			ДокументПеречисления.СПревышения = СтрокаРодителя.СтавкаНДФЛ <> Перечисления.НДФЛСтавки.Ставка13;
			ЗаполнитьЗначенияСвойств(ДокументПеречисления,ЗначенияДляЗаполнения);
			ДокументПеречисления.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЦикла; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыполнениеДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	//<ШАБЛОН: ЗДЕСЬ ОПИСЫВАЕТСЯ ОТМЕНА ДЛИТЕЛЬНОЙ ОПЕРАЦИИ>
	Возврат Неопределено;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Служебные процедуры и функции

&НаСервере
Процедура ВыполнитьДлительнуюОперациюНаСервере(Отказ)
	
	//<ШАБЛОН: ЗДЕСЬ ОПИСЫВАЕТСЯ ЛОГИКА ДЛИТЕЛЬНОЙ ОПЕРАЦИИ>
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДалее()
	
	ИзменитьПорядковыйНомерПерехода(+2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	
	ИзменитьПорядковыйНомерПерехода(-3);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

&НаКлиенте
Функция Подключаемый_Начало_ПриПереходеДалее(Отказ)
	
	ЗаполнитьТаблицуКВыплате();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

&НаСервере
Процедура СценарийСозданияТаблицыПереходов()
	
	ТаблицаПереходов.Очистить();
	ТаблицаПереходовНоваяСтрока(1, "Начало",  			              	"СтраницаНавигацииНачало",,, "Начало_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "Окончание", 		       			"СтраницаНавигацииОкончание");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВСписке(пФлаг)
	
	Для Каждого Строка Из СписокСуммКПеречислению.ПолучитьЭлементы() Цикл
		Если Строка <> Неопределено Тогда
			Строка.Пометка = пФлаг;
			УстановитьПометки(Строка, "Пометка", пФлаг);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометки(пДерево, пИмяПометки, пПометка)
	
	Строки = ПолучитьВложенныеСтрокиДерева(пДерево);
	Для Каждого Строка Из Строки Цикл
		
		//Если Не Строка.НельзяИзменять Тогда
			Строка[пИмяПометки] = пПометка;
		//КонецЕсли;
		УстановитьПометки(Строка, пИмяПометки, пПометка);
		
		//Если Строка.ЭтоГруппа Тогда
		//	Строка[пИмяПометки] = ПолучитьПометкуПоСостояниюПоддерева(Строка, пИмяПометки);
		//КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометки()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПометкуРодителя(Знач пСтрокаДерева, пИмяПометки)
	
	Пока пСтрокаДерева <> Неопределено Цикл
		Пометка = ПолучитьПометкуПоСостояниюПоддерева(пСтрокаДерева, пИмяПометки);
		Если Пометка <> -1 И Пометка <> пСтрокаДерева[пИмяПометки] Тогда
			пСтрокаДерева[пИмяПометки] = Пометка;
			пСтрокаДерева = ПолучитьРодителяСтрокиДерева(пСтрокаДерева);
		Иначе
			пСтрокаДерева = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПометкуРодителя()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПометкуПоСостояниюПоддерева(пРодитель, пИмяПометки)
	
	ЕстьОтмеченные = Ложь;
	ЕстьНеотмеченные = Ложь;
	ПодчиненныеСтроки = ПолучитьВложенныеСтрокиДерева(пРодитель);
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока[пИмяПометки] = 0 Тогда
			ЕстьНеотмеченные = Истина;
		ИначеЕсли ПодчиненнаяСтрока[пИмяПометки] = 1 Тогда
			ЕстьОтмеченные = Истина;
		ИначеЕсли ПодчиненнаяСтрока[пИмяПометки] = 2 Тогда
			ЕстьОтмеченные = Истина;
			ЕстьНеотмеченные = Истина;
		КонецЕсли;
		Если ЕстьОтмеченные И ЕстьНеотмеченные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченные И ЕстьНеотмеченные Тогда
		Результат = 2;
	ИначеЕсли Не ЕстьОтмеченные И ЕстьНеотмеченные Тогда
		Результат = 0;
	ИначеЕсли ЕстьОтмеченные И Не ЕстьНеотмеченные Тогда
		Результат = 1;
	Иначе
		Результат = -10;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПометкуПоСостояниюПоддерева()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВложенныеСтрокиДерева(пДерево)
	
	#ЕСЛИ ТонкийКлиент ИЛИ ВебКлиент ТОГДА
		Строки = пДерево.ПолучитьЭлементы();
	#ИНАЧЕ
		Если ТипЗнч(пДерево) = Тип("ДанныеФормыЭлементДерева") Тогда
			Строки = пДерево.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(пДерево) = Тип("СтрокаДереваЗначений") Или ТипЗнч(пДерево) = Тип("ДеревоЗначений") Тогда
			Строки = пДерево.Строки;
		КонецЕсли;
	#КОНЕЦЕСЛИ
	
	Возврат Строки;
	
КонецФункции // ПолучитьСтрокиСтрокиДерева()

&НаКлиентеНаСервереБезКонтекста

Функция ПолучитьРодителяСтрокиДерева(пСтрокаДерева)
	
	#ЕСЛИ ТонкийКлиент ИЛИ ВебКлиент ТОГДА
		Родитель = пСтрокаДерева.ПолучитьРодителя();
	#ИНАЧЕ
		Если ТипЗнч(пСтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
			Родитель = пСтрокаДерева.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(пСтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
			Родитель = пСтрокаДерева.Родитель;
			Если ТипЗнч(Родитель) = Тип("ДеревоЗначений") Тогда
				Родитель = Неопределено;
			КонецЕсли;
		КонецЕсли;
	#КОНЕЦЕСЛИ
	
	Возврат Родитель;
	
КонецФункции // ПолучитьРодителяСтрокиДерева()

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиВСписке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьФлажкиВСписке(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСуммКПеречислениюПометкаПриИзменении(Элемент)
	                          
	ТекущаяСтрока = Элементы["СписокСуммКПеречислению"].ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		УстановитьПометки(ТекущаяСтрока, "Пометка", ТекущаяСтрока["Пометка"]);
		
		Родитель = ПолучитьРодителяСтрокиДерева(ТекущаяСтрока);
		ОбновитьПометкуРодителя(Родитель, "Пометка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДФЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	//ЮТР Яцутко А.Ю. 2021-11-03 +++
	//jira HR1C-1568
	
	//СтандартнаяОбработка = Ложь;
	//
	//ДанныеВыбора = Новый СписокЗначений;
	//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДФЛСтавки.Ставка13"));
	//ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НДФЛСтавки.Ставка15"));
	
	//ЮТР Яцутко А.Ю.  2021-11-03 ---
	
КонецПроцедуры
	
#КонецОбласти
